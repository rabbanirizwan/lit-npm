@import "./vars";
@import "./breakpoints";
@import "./util";

@function gridColumnsToFractionalUnits($columns) {
    $cssColumnNotation:'';
    @for $i from 1 through $columns {
        $cssColumnNotation : $cssColumnNotation + '1fr '
    }
    @return unquote($cssColumnNotation);
}

@mixin generateGridColumnDefinitions($numberOfColumns, $breakpoint) {
  
    @for $column-span from 1 through $numberOfColumns {
        @include breakpoint($breakpoint) { 
            .#{$class-prefix}-#{$breakpoint}-col-#{$column-span} {
                grid-column: auto / span #{$column-span};
            }
        }
    }
   
}


.#{$class-prefix}-grid-container {
    display: grid;
    grid-template-columns: gridColumnsToFractionalUnits(map-get($breakpoint-grid-columns, "max"));
    grid-gap: $sub-grid-px * 4px;
    @include padding(left, 3);
    @include padding(right, 3);
    margin: 0 auto;

    

    @include breakpoint(max) {
        max-width: map-get($breakpoints, "xlg") + 1;
    }

    @include breakpoint(xlg) { 
        max-width: map-get($breakpoints, "lg") + 1;
        @include padding(left, 2);
        @include padding(right, 2);
    }

    @include breakpoint(lg) { 
        max-width: map-get($breakpoints, "md") + 1;
        @include padding(left, 2);
        @include padding(right, 2);
    }

    @include breakpoint(md) { 
        grid-template-columns: gridColumnsToFractionalUnits(map-get($breakpoint-grid-columns, "md"));
        @include padding(left, 2);
        @include padding(right, 2);
    }

    @include breakpoint(sm) { 
        grid-template-columns: gridColumnsToFractionalUnits(map-get($breakpoint-grid-columns, "sm"));
        @include padding(left, 2);
        @include padding(right, 2);
    }

    @include breakpoint(xs) {
        grid-template-columns: gridColumnsToFractionalUnits(map-get($breakpoint-grid-columns, "xs"));
        padding: 0;
    }

    &.#{$class-prefix}-no-grid-gap {
        grid-gap: 0px;
    }

    &.#{$class-prefix}-no-grid-padding {
        padding-left: 0;
        padding-right: 0;
    }

    &.#{$class-prefix}-fully-fluid {
        @include breakpoint(max) {
            max-width: 100%;
        }
    
        @include breakpoint(xlg) { 
            max-width: 100%;
        }
    
        @include breakpoint(lg) { 
            max-width: 100%;
        }
    }

}

//Grid Column Definitions
@each $name, $columns in $breakpoint-grid-columns {
    @include generateGridColumnDefinitions($columns, $name);
}


//Aspect Ratio Classes

.#{$class-prefix}-aspect-ratio {

    &--2x1:before {
        padding-top: 50%;
    }

    &--1x2:before {
        padding-top: 200%;
    }

    &--16x9:before {
        padding-top: 56.25%;
    }

    &--4x3:before {
        padding-top: 75%;
    }

    &--3x4:before {
        padding-top: 133.33%;
    }

    &--1x1:before {
        padding-top: 100%;
    }

    &:after {
        clear: both;
        content: "";
        display: table;
    }

    &:before {
        content: "";
        float: left;
        height: 0;
        margin-left: -1px;
        width: 1px;
    }
}