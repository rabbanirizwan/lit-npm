@use 'sass:math';

@import './vars';

/// Converts amount in pixel units to the corresponding rem amount according to the base font size.
///
/// @param {Keyword|Number} $px - The amount of pixels
/// @param {Keyword|Number} $base - The base font size
///
/// @output Outputs the calculated rem units.
@function px2rem($px, $base: 16) {
  $multiplier: math.div(10, $base);
  @return math.div($px * $multiplier, 10) + 'rem';
}

/// Adds the appropriate padding according to the sub-grid units.
///
/// @param {Keyword|Number} $side... - The direction the padding should go. (top, right, bottom, left)
/// @param {Keyword|Number} $amount - The number of sub-grid units.
/// @param {Keyword|Number} $unit - The number of pixels per sub-grid unit.
///
/// @output Adds the appropriate padding in rems.
@mixin padding($side, $amount, $unit: $sub-grid-px) {
  @each $s in $side {
    @if $s == 'top' or $s == 'right' or $s == 'bottom' or $s == 'left' {
      padding-#{$s}: #{px2rem($amount * $unit)};
    } @else {
      @warn 'padding(): "#{$s}" is not a supported side.';
    }
  }
}

/// Generates classes for setting padding around elements.
///
/// @param {Keyword|Number} $n - The number of classes to generate.
///
/// @output Creates $n classes for setting padding.
@mixin create-padding-classes($n: 8) {
  @for $i from 0 through $n {
    .#{$class-prefix}-pt#{$i} {
      @include padding(top, $i);
    }
    .#{$class-prefix}-pr#{$i} {
      @include padding(right, $i);
    }
    .#{$class-prefix}-pb#{$i} {
      @include padding(bottom, $i);
    }
    .#{$class-prefix}-pl#{$i} {
      @include padding(left, $i);
    }
  }
}

@include create-padding-classes();

/// Adds the appropriate margin according to the sub-grid units.
///
/// @param {Keyword|Number} $side... - The direction the margin should go. (top, right, bottom, left)
/// @param {Keyword|Number} $amount - The number of sub-grid units.
/// @param {Keyword|Number} $unit - The number of pixels per sub-grid unit.
///
/// @output Adds the appropriate margins in rems.
@mixin margin($side, $amount, $unit: $sub-grid-px) {
  @each $s in $side {
    @if $s == 'top' or $s == 'right' or $s == 'bottom' or $s == 'left' {
      margin-#{$s}: #{px2rem($amount * $unit)};
    } @else {
      @warn 'margin(): "#{$s}" is not a supported side.';
    }
  }
}

/// Generates classes for setting margins around elements.
///
/// @param {Keyword|Number} $n - The number of classes to generate.
///
/// @output Creates $n classes for setting margins.
@mixin create-margin-classes($n: 8) {
  @for $i from 0 through $n {
    .#{$class-prefix}-mt#{$i} {
      @include margin(top, $i);
    }
    .#{$class-prefix}-mr#{$i} {
      @include margin(right, $i);
    }
    .#{$class-prefix}-mb#{$i} {
      @include margin(bottom, $i);
    }
    .#{$class-prefix}-ml#{$i} {
      @include margin(left, $i);
    }
  }
}

@include create-margin-classes();

/// Generates classes for setting background on elements.
///
/// @output Creates classes for the individual colors.
@mixin create-background-classes {
  @each $name, $value in $colors {
    .#{$class-prefix}-bg-#{$name} {
      background-color: #{$value};
    }
  }
}

@include create-background-classes;

/// Generates classes for setting font color on elements.
///
/// @output Creates classes for the individual colors.
@mixin create-color-classes {
  @each $name, $value in $colors {
    .#{$class-prefix}-font-#{$name} {
      color: #{$value};
    }
  }
}

@include create-color-classes;
